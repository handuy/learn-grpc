// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CompileServiceClient is the client API for CompileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompileServiceClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (CompileService_CompileClient, error)
}

type compileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompileServiceClient(cc grpc.ClientConnInterface) CompileServiceClient {
	return &compileServiceClient{cc}
}

func (c *compileServiceClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (CompileService_CompileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CompileService_serviceDesc.Streams[0], "/compiler.CompileService/Compile", opts...)
	if err != nil {
		return nil, err
	}
	x := &compileServiceCompileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompileService_CompileClient interface {
	Recv() (*CompileResponse, error)
	grpc.ClientStream
}

type compileServiceCompileClient struct {
	grpc.ClientStream
}

func (x *compileServiceCompileClient) Recv() (*CompileResponse, error) {
	m := new(CompileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompileServiceServer is the server API for CompileService service.
// All implementations must embed UnimplementedCompileServiceServer
// for forward compatibility
type CompileServiceServer interface {
	Compile(*CompileRequest, CompileService_CompileServer) error
	mustEmbedUnimplementedCompileServiceServer()
}

// UnimplementedCompileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompileServiceServer struct {
}

func (UnimplementedCompileServiceServer) Compile(*CompileRequest, CompileService_CompileServer) error {
	return status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedCompileServiceServer) mustEmbedUnimplementedCompileServiceServer() {}

// UnsafeCompileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompileServiceServer will
// result in compilation errors.
type UnsafeCompileServiceServer interface {
	mustEmbedUnimplementedCompileServiceServer()
}

func RegisterCompileServiceServer(s *grpc.Server, srv CompileServiceServer) {
	s.RegisterService(&_CompileService_serviceDesc, srv)
}

func _CompileService_Compile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompileServiceServer).Compile(m, &compileServiceCompileServer{stream})
}

type CompileService_CompileServer interface {
	Send(*CompileResponse) error
	grpc.ServerStream
}

type compileServiceCompileServer struct {
	grpc.ServerStream
}

func (x *compileServiceCompileServer) Send(m *CompileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CompileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compiler.CompileService",
	HandlerType: (*CompileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Compile",
			Handler:       _CompileService_Compile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/compiler.proto",
}
